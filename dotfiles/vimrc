"
" Plugin追加したら :PlugInstall を実行
"
"--------------------
" Plugin Install
"--------------------
if has('vim_starting')
  set rtp+=~/.vim/plugged/vim-plug
  if !isdirectory(expand('~/.vim/plugged/vim-plug'))
    echo 'install vim-plug...'
    call system('mkdir -p ~/.vim/plugged/vim-plug')
    call system('git clone https://github.com/junegunn/vim-plug.git ~/.vim/plugged/vim-plug/autoload')
  end
endif

"Install Plugins
call plug#begin('~/.vim/plugged')
  Plug 'junegunn/vim-plug',
        \ {'dir': '~/.vim/plugged/vim-plug/autoload'}
  "Thema
  Plug 'w0ng/vim-hybrid'
  Plug 'altercation/vim-colors-solarized' 
  "Markdown
  Plug 'plasticboy/vim-markdown'
  Plug 'kannokanno/previm'
  Plug 'tyru/open-browser.vim'
  Plug 'hashivim/vim-terraform'  " vim-terraform
  Plug 'chase/vim-ansible-yaml'  " vim-yaml
  Plug 'stephpy/vim-yaml'        " vim-yaml
  Plug 'scrooloose/nerdtree'     " Dir Tree `:NERDTreeToggle` https://kamiya555.github.io/2015/10/14/nerdtree-command/
  Plug 'tpope/vim-commentary'    " Range CommentOut V, Select, gc
  Plug 'scrooloose/syntastic' " SyntaxChecker 
  Plug 'ekalinin/Dockerfile.vim' " Docker & DockerCompose Syntax
  Plug 'scrooloose/nerdtree'     " ファイルをtree表示してくれる :NERDTree
call plug#end()
 

"--------------------
" 基本的な設定
"--------------------
"エンコーディング
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8
"改行コード自動判別
set fileformats=unix,dos,mac
"新しい行のインデントを現在行と同じにする
set autoindent 
"バックアップファイルのディレクトリを指定する
set backupdir=$HOME/.vim/backup
"クリップボードをWindowsと連携する
set clipboard=unnamed
"vi互換をオフする
set nocompatible
"スワップファイル用のディレクトリを指定する
set directory=$HOME/.vim/backup
"Undoファイル用のディレクトリを指定する
set undodir=$HOME/.vim/undo
"タブの代わりに空白文字を指定する
set expandtab
"変更中のファイルでも、保存しないで他のファイルを表示する
set hidden
"インクリメンタルサーチを行う
set incsearch
"行番号を表示する
set number
"閉括弧が入力された時、対応する括弧を強調する
set showmatch
"新しい行を作った時に高度な自動インデントを行う
set smarttab
"自動で挿入されるインデントのスペース幅
set shiftwidth=2
"tab キーを押した時に挿入されるスペース量
set softtabstop=2
" grep検索を設定する
set grepformat=%f:%l:%m,%f:%l%m,%f\ \ %l%m,%f
set grepprg=grep\ -nh
" 検索結果のハイライトをEsc連打でクリアする
nnoremap <ESC><ESC> :nohlsearch<CR>
" NERDTreeをCtrl+nで開くことができます
map <C-n> :NERDTreeToggle<CR>

" Delete Keyを有効にする
set nocompatible
set whichwrap=b,s,h,l,<,>,[,]
"BSで削除できるものを指定する
" indent  : 行頭の空白
" eol     : 改行
" start   : 挿入モード開始位置より手前の文字
set backspace=indent,eol,start

" 拡張子に合わせてfiletypeを変更する
autocmd BufRead,BufNewFile *.mkd  set filetype=markdown
autocmd BufRead,BufNewFile *.md  set filetype=markdown
autocmd BufRead,BufNewFile *.rb setlocal filetype=ruby tabstop=2 softtabstop=2 shiftwidth=2
autocmd BufRead,BufNewFile *.py setlocal filetype=python tabstop=4 softtabstop=4 shiftwidth=4
autocmd BufRead,BufNewFile *.yaml setlocal filetype=ansible 
autocmd BufRead,BufNewFile *.yml setlocal filetype=yaml
autocmd BufWritePre * :%s/\s\+$//ge

"--------------------
" visible WHITESPACE/TAB/LF
"--------------------
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%

"--------------------
" markdown
"--------------------
" Need: kannokanno/previm
nnoremap <silent> <C-p> :PrevimOpen<CR> " Ctrl-pでプレビュー
" 自動で折りたたまないようにする
let g:vim_markdown_folding_disabled=1

"--------------------
" Syntastic Setting
"--------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs=1
"let g:syntastic_mode_map = {'mode': 'passive', 'active_filetypes': ['ruby'] }
let g:syntastic_mode_map = {'mode': 'passive'}
let g:syntastic_ruby_checkers = ['rubocop']

"--------------------
" Syntack Chekers
"--------------------
let g:syntastic_yaml_checkers = ['yamllint']

" バッファを編集したら即座に文法チェック
" http://qiita.com/knsh14/items/20c6e1e7ea0c0681dafd
augroup AutoSyntastic
    autocmd!
    autocmd InsertLeave,TextChanged,BufRead,BufNewFile,BufWritePost * call s:syntastic() 
augroup END
function! s:syntastic()
    SyntasticCheck
endfunction

"--------------------
" Enable Thema
"--------------------
syntax enable
set background=dark
colorscheme solarized
" let g:solarized_termcolors=256

"--------------------
" terraform formatter setting 
"--------------------
let g:terraform_fmt_on_save = 1

"--------------------
" ansible formatter setting
"--------------------
let g:ansible_options = {'ignore_blank_lines': 0}
